package data;

import javafx.scene.layout.GridPane;

public class NumberBoard {
	private int[] board;

	// 1 pawn, 2 rook, 3 bishop, 4 knight, 5 queen, 6 king
	private static int[] FIGURE_TYPES = { 1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6 };

	//starting locations of each chess piece
	private static int[] STARTIN_LOCATIONS_PAWN = { 8, 9, 10, 11, 12, 13, 14, 15 };
	private static int[] STARTIN_LOCATIONS_ROOK = { 0, 7 };
	private static int[] STARTIN_LOCATIONS_KNIGHT = { 2, 5 };
	private static int[] STARTIN_LOCATIONS_BISHOP = { 1, 6 };
	private static int[] STARTIN_LOCATIONS_QUEEN = { 3};
	private static int[] STARTIN_LOCATIONS_KING = { 4};

	
	private static int[][] STARTING_LOCATIONS = { STARTIN_LOCATIONS_PAWN, STARTIN_LOCATIONS_ROOK,
			STARTIN_LOCATIONS_KNIGHT, STARTIN_LOCATIONS_BISHOP, STARTIN_LOCATIONS_QUEEN, STARTIN_LOCATIONS_KING };

	//Initializes an array of 64 ints for the game board
	public NumberBoard() {
		board = new int[64];
		for (int i = 0; i < 64; i++)
			board[i] = 0;
	}

	public void populateNumberBoard() {
		int currentLocation = -1;
		int currentType = 99999;
		// i: once for black and once for white
		for (int i = 0; i < 2; i++) {
			// k once for each of the 6 types of figures
			for (int k = 0; k < 6; k++) {
				// t: for the amount of figures of this type
				for (int t = 0; t < STARTING_LOCATIONS[k].length; t++) {
					currentLocation = -1; // default
					currentType = 99999; // default

					currentLocation = STARTING_LOCATIONS[k][t];
					currentType = k + 1;
					if (i != 0) {
						currentType *= -1;
						currentLocation = 63 - currentLocation;
					}
					board[currentLocation] = currentType;
				}
			}
		}
	}

	public void populateGridPane(GridPane gameBoard) {
		int currentLocation = -1;
		int currentType = 99999;
		// i: once for black and once for white
		for (int i = 0; i < 2; i++) {
			// k once for each of the 6 types of figures
			for (int k = 0; k < 6; k++) {
				// t: for the amount of figures of this type
				for (int t = 0; t < STARTING_LOCATIONS[k].length; t++) {
					currentLocation = -1; // reset
					currentType = 99999;

					currentLocation = STARTING_LOCATIONS[k][t];
					currentType = k + 1;
					if (i != 0) {
						currentType *= -1;
						currentLocation = 63 - currentLocation;
					}
					FigureView chessPiece = new FigureView(currentType);
					int[] coordinate = numberToCoordinate(currentLocation);

					gameBoard.add(chessPiece, coordinate[1], coordinate[0]);

				}
			}
		}
	}

	public String getString() {
		String board_representation = "";

		int currentSymbol = 999;

		board_representation += "[ ";

		for (int k = 0; k < 64; k++) {
			currentSymbol = 999;
			currentSymbol = board[k];

			if (currentSymbol > -1)
				board_representation += 0;
			board_representation += currentSymbol + ", ";

			if ((k + 1) % 8 == 0) {
				board_representation += "]\n";
				if (k != 63)
					board_representation += "[ ";
			}
		}

		return board_representation;

	}

	public void makeMove(int field, int newField) {
		board[newField] = board[field];
		board[field] = 0;
	}

	public int[] numberToCoordinate(int number) {
		int[] coordinate = new int[2];
		int row = number / 8;
		int column = number % 8;
		coordinate[0] = row;
		coordinate[1] = column;

		return coordinate;

	}

	public String printableCoordinate(int[] coordinate) {
		String representation = "";

		representation += "(" + coordinate[0] + "," + coordinate[1] + ")";

		return representation;
	}

	public static void main(String[] args) {
		NumberBoard board = new NumberBoard();
		board.populateNumberBoard();

		System.out.println(board.getString());

	}

	/*
	 * @format:off
	 * [ 00, 01, 02, 03, 04, 05, 06, 07 ]
	 * [ 08, 09, 10, 11, 12, 13, 14, 15 ]
	 * [ 16, 17, 18, 19, 20, 21, 22, 23 ]
	 * [ 24, 25, 26, 27, 28, 29, 30, 31 ]
	 * [ 32, 33, 34, 35, 36, 37, 38, 39 ]
	 * [ 40, 41, 42, 43, 44, 45, 46, 47 ]
	 * [ 48, 49, 50, 51, 52, 53, 54, 55 ]
	 * [ 56, 57, 58, 59, 60, 61, 62, 63 ]
	 * 
	 */
	/*
			0	  1		2	  3		4	  5		6	  7
	0	[ (0,0),(0,1),(0,2),(0,3),(0,4),(0,5),(0,6),(0,7) ]
	
	1	[ (1,0),(1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7) ]
	
	2	[ (2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(2,7) ]
	
	3	[ (3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7) ]
	
	4	[ (4,0),(4,1),(4,2),(4,3),(4,4),(4,5),(4,6),(4,7) ]
	
	5	[ (5,0),(5,1),(5,2),(5,3),(5,4),(5,5),(5,6),(5,7) ]
	
	6	[ (6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7) ]
	
	7	[ (7,0),(7,1),(7,2),(7,3),(7,4),(7,5),(7,6),(7,7) ]
	
	*/

}
